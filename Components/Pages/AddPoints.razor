@page "/points/{employeeId:int}"
@using Microsoft.AspNetCore.Authorization
@using Scores.Data
@using Scores.Models

@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<div class="d-flex my-3">
    <div class="col"></div>
    <div class="card mb-3 col-6">
        <svg class="bd-placeholder-img card-img-top" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false"><title>Placeholder</title><rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef" dy=".3em">@employeeToEdit.Name</text></svg>
        <div class="card-body">
            <h5 class="card-title">@employeeToEdit.Name</h5>
            <p class="card-text">@employeeToEdit.Title</p>
        </div>
        <div class="card-body">
            <div class="d-flex gap-4">
                <div class="mb-3 col">
                    <label for="PositivePoints" class="form-label text-success">Positive Points</label>
                    <input type="number" class="form-control" id="PositivePoints" @bind="positivePointsToAdd">
                </div>
                <div class="mb-3 col">
                    <label for="NegativePoints" class="form-label text-danger">Negative Points</label>
                    <input type="number" class="form-control" id="NegativePoints" @bind="negativePointsToAdd">
                </div>
            </div>
        </div>
        <div class="card-body d-flex justify-content-between align-items-center">
            <button class="btn btn-primary w-25" @onclick="() => addPoints(positivePointsToAdd, negativePointsToAdd)">Add</button>
        </div>
    </div>
    <div class="col"></div>
</div>


@code {
    [Parameter] public int employeeId { get; set; }
    private Employee employeeToEdit = new Employee();
    public List<ActionLog> logs = new List<ActionLog>();

    int positivePointsToAdd = 0;
    int negativePointsToAdd = 0;

    protected override void OnInitialized()
    {
        GetEmployee();
    }

    private void GetEmployee()
    {
        employeeToEdit = dbContext.Employees.Where(e => e.Id == employeeId).FirstOrDefault();
    }

    private void addPoints(int positivePointsToAdd, int negativePointsToAdd)
    {
        employeeToEdit.PositivePoints += positivePointsToAdd;
        employeeToEdit.NegativePoints += negativePointsToAdd;

        dbContext.Employees.Update(employeeToEdit);

        if (positivePointsToAdd != 0)
        {
            var log = new ActionLog
                {
                    EmployeeId = employeeId,
                    Action = (positivePointsToAdd > 0) ? "Add Positive Points" : "Clear Positive Points",
                    PointsAdded = positivePointsToAdd,
                };
            AddActionLog(log);
        }

        if (negativePointsToAdd != 0)
        {
            var log = new ActionLog
                {
                    EmployeeId = employeeId,
                    Action = (negativePointsToAdd > 0) ? "Add Negative Points" : "Clear Negative Points",
                    PointsAdded = negativePointsToAdd
                };
            AddActionLog(log);
        }

        dbContext.SaveChanges();

        NavigationManager.NavigateTo("/points");
    }

    private void AddActionLog(ActionLog log)
    {
        dbContext.ActionLogs.Add(log);
    }
}
